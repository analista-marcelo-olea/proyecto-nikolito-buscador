const XLSX = require('xlsx');
const fs = require('fs');
const iconv = require('iconv-lite');

// Configuraci√≥n
const archivoExcel = '2503 - Reporte FNL - LT.xlsx';
const archivoCSV = '2503 - Reporte FNL - LT.csv';

// Mapa de correcciones de caracteres espec√≠ficos
const correccionesEspecificas = {
    'Conexi√É¬≥n': 'Conexi√≥n',
    'ALMAC√É‚Ä∞N': 'ALMAC√âN',
    'Le√É¬≠do': 'Le√≠do',
    'Estimaci√É¬≥n': 'Estimaci√≥n',
    'Inspecci√É¬≥n': 'Inspecci√≥n',
    'Verificaci√É¬≥n': 'Verificaci√≥n',
    'Medici√É¬≥n': 'Medici√≥n',
    'Instalaci√É¬≥n': 'Instalaci√≥n',
    'Calibraci√É¬≥n': 'Calibraci√≥n',
    'Revisi√É¬≥n': 'Revisi√≥n',
    'Soluci√É¬≥n': 'Soluci√≥n',
    'Atenci√É¬≥n': 'Atenci√≥n',
    'Informaci√É¬≥n': 'Informaci√≥n',
    'Operaci√É¬≥n': 'Operaci√≥n',
    'Administraci√É¬≥n': 'Administraci√≥n'
};

function limpiarTextoCompleto(texto) {
    if (typeof texto !== 'string') return texto;
    
    let textoLimpio = texto;
    
    // Aplicar correcciones espec√≠ficas primero
    Object.keys(correccionesEspecificas).forEach(clave => {
        const regex = new RegExp(clave, 'g');
        textoLimpio = textoLimpio.replace(regex, correccionesEspecificas[clave]);
    });
    
    // Luego aplicar correcciones generales
    textoLimpio = textoLimpio
        .replace(/√É¬≥/g, '√≥')
        .replace(/√É¬°/g, '√°')
        .replace(/√É¬©/g, '√©')
        .replace(/√É¬≠/g, '√≠')
        .replace(/√É¬∫/g, '√∫')
        .replace(/√É¬±/g, '√±')
        .replace(/√É‚Ä∞/g, '√â')
        .replace(/√É/g, '√Å')
        .replace(/√É"/g, '√ç')
        .replace(/√É≈°/g, '√ö')
        .replace(/√É'/g, '√ë')
        .replace(/√É¬ß/g, '√ß')
        .replace(/√É¬º/g, '√º')
        .replace(/√É¬®/g, '√®')
        .replace(/√É /g, '√†')
        .replace(/√É¬¨/g, '√¨')
        .replace(/√É¬≤/g, '√≤')
        .replace(/√É¬π/g, '√π')
        // Corregir patrones de fecha con espacios extra
        .replace(/(\d{4}-\d{2}-\d{2})\s\s+(\d{2}:\d{2}:\d{2})/g, '$1 $2')
        .replace(/(\d{1,2})\/(\d{1,2})\/(\d{2,4})\s\s+(\d{2}:\d{2}:\d{2})/g, '$1/$2/$3 $4')
        // Limpiar espacios extra
        .replace(/\s+/g, ' ')
        .trim();
    
    return textoLimpio;
}

function convertirExcelACSV() {
    try {
        console.log('üìñ Leyendo archivo Excel:', archivoExcel);
        
        // Verificar si el archivo existe
        if (!fs.existsSync(archivoExcel)) {
            console.error('‚ùå Error: No se encontr√≥ el archivo', archivoExcel);
            console.log('üìÅ Archivos disponibles en el directorio:');
            fs.readdirSync('.').forEach(file => {
                if (file.endsWith('.xlsx') || file.endsWith('.xls')) {
                    console.log('   -', file);
                }
            });
            return;
        }

        // Leer el archivo Excel con configuraci√≥n espec√≠fica para caracteres
        const workbook = XLSX.readFile(archivoExcel, {
            type: 'buffer',
            codepage: 65001 // UTF-8
        });
        
        // Obtener la primera hoja
        const sheetName = workbook.SheetNames[0];
        console.log('üìÑ Procesando hoja:', sheetName);
        
        const worksheet = workbook.Sheets[sheetName];
        
        // Convertir a JSON manteniendo el formato original
        const jsonData = XLSX.utils.sheet_to_json(worksheet, { 
            header: 1,
            raw: false,
            defval: '', // Valor por defecto para celdas vac√≠as
            blankrows: false // Omitir filas vac√≠as
        });

        console.log('üîç Datos encontrados:', jsonData.length, 'filas');
        
        if (jsonData.length === 0) {
            console.error('‚ùå Error: El archivo Excel est√° vac√≠o o no se pudo leer');
            return;
        }

        // Procesar los datos
        const datosCorregidos = jsonData.map(fila => {
            return fila.map(celda => limpiarTextoCompleto(celda));
        });

        // Convertir a CSV con codificaci√≥n UTF-8
        const csvContent = datosCorregidos
            .map(fila => 
                fila.map(celda => {
                    // Manejar valores que contienen comas, comillas o saltos de l√≠nea
                    const valor = String(celda || '');
                    if (valor.includes(',') || valor.includes('"') || valor.includes('\n') || valor.includes('\r')) {
                        return `"${valor.replace(/"/g, '""')}"`;
                    }
                    return valor;
                }).join(',')
            )
            .join('\n');

        // Guardar con codificaci√≥n UTF-8 expl√≠cita
        fs.writeFileSync(archivoCSV, '\ufeff' + csvContent, 'utf8'); // \ufeff es el BOM para UTF-8
        
        console.log('‚úÖ Conversi√≥n completada exitosamente!');
        console.log('üìÅ Archivo CSV generado:', archivoCSV);
        console.log('üìä Total de filas procesadas:', datosCorregidos.length);
        
        // Mostrar muestra de los datos corregidos
        console.log('\nüîç Muestra de los primeros datos corregidos:');
        datosCorregidos.slice(0, 3).forEach((fila, i) => {
            console.log(`Fila ${i + 1}:`, fila.slice(0, 10).join(' | '));
        });

        // Verificar correcciones espec√≠ficas
        console.log('\nüîß Verificando correcciones aplicadas:');
        const contenidoCompleto = csvContent;
        Object.keys(correccionesEspecificas).forEach(original => {
            if (contenidoCompleto.includes(original)) {
                console.log(`‚ö†Ô∏è  A√∫n encontrado: ${original}`);
            } else {
                console.log(`‚úÖ Corregido: ${original} ‚Üí ${correccionesEspecificas[original]}`);
            }
        });

    } catch (error) {
        console.error('‚ùå Error durante la conversi√≥n:', error.message);
        console.log('\nüí° Posibles soluciones:');
        console.log('1. Verificar que el archivo Excel no est√© abierto');
        console.log('2. Verificar que el archivo no est√© corrupto');
        console.log('3. Instalar dependencias: npm install xlsx iconv-lite');
    }
}

// Ejecutar la conversi√≥n
console.log('üöÄ Iniciando conversi√≥n mejorada de Excel a CSV...\n');
convertirExcelACSV();
